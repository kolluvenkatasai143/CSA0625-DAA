#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void strassenMatrixMultiply(int **A, int **B, int **C, int n) {
}
void calculateTimeComplexity(int n) {
    clock_t start, end;
    double cpu_time_used;
    int **A = (int **)malloc(n * sizeof(int *));
    int **B = (int **)malloc(n * sizeof(int *));
    int **C = (int **)malloc(n * sizeof(int *));
    for (int i = 0; i < n; i++) {
        A[i] = (int *)malloc(n * sizeof(int));
        B[i] = (int *)malloc(n * sizeof(int));
        C[i] = (int *)malloc(n * sizeof(int));
        for (int j = 0; j < n; j++) {
            A[i][j] = rand() % 10;  
            B[i][j] = rand() % 10;
        }
    }
    start = clock();
    strassenMatrixMultiply(A, B, C, n);
    end = clock();
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Time complexity of Strassen's matrix multiplication for n=%d is: %.6f seconds\n", n, cpu_time_used);
    for (int i = 0; i < n; i++) {
        free(A[i]);
        free(B[i]);
        free(C[i]);
    }
    free(A);
    free(B);
    free(C);
}
int main() {
    int sizes[] = {32, 64, 128, 256}; 
    int num_sizes = sizeof(sizes) / sizeof(sizes[0]);
    for (int i = 0; i < num_sizes; i++) {
        calculateTimeComplexity(sizes[i]);
    }
    return 0;
}
