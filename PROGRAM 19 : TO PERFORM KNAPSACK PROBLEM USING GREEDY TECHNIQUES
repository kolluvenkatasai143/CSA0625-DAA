#include <stdio.h>
#include <stdlib.h>
struct Item {
    int value;
    int weight;
};
int compare(const void *a, const void *b) {
    double ratio_a = ((struct Item *)a)->value / (double)((struct Item *)a)->weight;
    double ratio_b = ((struct Item *)b)->value / (double)((struct Item *)b)->weight;
    if (ratio_a > ratio_b) return -1;
    else if (ratio_a < ratio_b) return 1;
    else return 0;
}
double knapsack(int capacity, struct Item items[], int n) {
    qsort(items, n, sizeof(items[0]), compare);
    double totalValue = 0.0;
    int currentWeight = 0;
    for (int i = 0; i < n; i++) {
        if (currentWeight + items[i].weight <= capacity) {
            totalValue += items[i].value;
            currentWeight += items[i].weight;
        } else {
            int remainingCapacity = capacity - currentWeight;
            totalValue += (double)items[i].value * remainingCapacity / items[i].weight;
            break;
        }
    }
    return totalValue;
}
int main() {
    struct Item items[] = {{60, 10}, {100, 20}, {120, 30}};
    int n = sizeof(items) / sizeof(items[0]);
    int capacity = 50;

    double maxValue = knapsack(capacity, items, n);
    printf("Maximum value achievable: %.2f\n", maxValue);
    return 0;
}
